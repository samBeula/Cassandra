Microsoft Windows [Version 10.0.19044.2604]
(c) Microsoft Corporation. All rights reserved.

C:\apache-cassandra-3.11.10\bin>cqlsh

WARNING: console codepage must be set to cp65001 to support utf-8 encoding on Windows platforms.
If you experience encoding problems, change your console codepage with 'chcp 65001' before starting cqlsh.

Connected to Test Cluster at 127.0.0.1:9042.
[cqlsh 5.0.1 | Cassandra 3.11.10 | CQL spec 3.4.4 | Native protocol v4]
Use HELP for help.
WARNING: pyreadline dependency missing.  Install to enable tab completion.
cqlsh> help

Documented shell commands:
===========================
CAPTURE  CLS          COPY  DESCRIBE  EXPAND  LOGIN   SERIAL  SOURCE   UNICODE
CLEAR    CONSISTENCY  DESC  EXIT      HELP    PAGING  SHOW    TRACING

CQL help topics:
================
AGGREGATES               CREATE_KEYSPACE           DROP_TRIGGER      TEXT
ALTER_KEYSPACE           CREATE_MATERIALIZED_VIEW  DROP_TYPE         TIME
ALTER_MATERIALIZED_VIEW  CREATE_ROLE               DROP_USER         TIMESTAMP
ALTER_TABLE              CREATE_TABLE              FUNCTIONS         TRUNCATE
ALTER_TYPE               CREATE_TRIGGER            GRANT             TYPES
ALTER_USER               CREATE_TYPE               INSERT            UPDATE
APPLY                    CREATE_USER               INSERT_JSON       USE
ASCII                    DATE                      INT               UUID
BATCH                    DELETE                    JSON
BEGIN                    DROP_AGGREGATE            KEYWORDS
BLOB                     DROP_COLUMNFAMILY         LIST_PERMISSIONS
BOOLEAN                  DROP_FUNCTION             LIST_ROLES
COUNTER                  DROP_INDEX                LIST_USERS
CREATE_AGGREGATE         DROP_KEYSPACE             PERMISSIONS
CREATE_COLUMNFAMILY      DROP_MATERIALIZED_VIEW    REVOKE
CREATE_FUNCTION          DROP_ROLE                 SELECT
CREATE_INDEX             DROP_TABLE                SELECT_JSON

cqlsh> describe keyspaces;

system_traces  system_schema  system_auth  system  system_distributed

cqlsh> CREATE KEYSPACE sample_db WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 3};
cqlsh> describe keyspaces;

system_schema  system_auth  system  sample_db  system_distributed  system_traces

cqlsh> describe sample_db

CREATE KEYSPACE sample_db WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '3'}  AND durable_writes = true;

cqlsh> ALTER KEYSPACE sample_db WITH replication = {'class':'NetworkTopologyStrategy', 'replication_factor' : 1};
ConfigurationException: replication_factor is an option for SimpleStrategy, not NetworkTopologyStrategy
cqlsh> ALTER KEYSPACE sample_db WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 1};
cqlsh> describe sample_db

CREATE KEYSPACE sample_db WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'}  AND durable_writes = true;

cqlsh> use sample_db
   ... ;
cqlsh:sample_db> CREATE TABLE emp(
             ...    emp_id int PRIMARY KEY,
             ...    emp_name text,
             ...    emp_city text,
             ...    emp_sal varint,
             ...    emp_phone varint
             ...    );
cqlsh:sample_db> describe sample_db.emp;

CREATE TABLE sample_db.emp (
    emp_id int PRIMARY KEY,
    emp_city text,
    emp_name text,
    emp_phone varint,
    emp_sal varint
) WITH bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

cqlsh:sample_db> select * from emp;

 emp_id | emp_city | emp_name | emp_phone | emp_sal
--------+----------+----------+-----------+---------

(0 rows)
cqlsh:sample_db> INSERT INTO emp (emp_id, emp_name, emp_city,
             ...    emp_phone, emp_sal) VALUES(1,'ram', 'Hyderabad', 9848022338, 50000);
cqlsh:sample_db>
cqlsh:sample_db> INSERT INTO emp (emp_id, emp_name, emp_city,
             ...    emp_phone, emp_sal) VALUES(2,'robin', 'Hyderabad', 9848022339, 40000);
cqlsh:sample_db>
cqlsh:sample_db> INSERT INTO emp (emp_id, emp_name, emp_city,
             ...    emp_phone, emp_sal) VALUES(3,'rahman', 'Chennai', 9848022330, 45000);
cqlsh:sample_db>
cqlsh:sample_db> select * from emp;

 emp_id | emp_city  | emp_name | emp_phone  | emp_sal
--------+-----------+----------+------------+---------
      1 | Hyderabad |      ram | 9848022338 |   50000
      2 | Hyderabad |    robin | 9848022339 |   40000
      3 |   Chennai |   rahman | 9848022330 |   45000

(3 rows)
cqlsh:sample_db> select * from emp where emp_id = 2;

 emp_id | emp_city  | emp_name | emp_phone  | emp_sal
--------+-----------+----------+------------+---------
      2 | Hyderabad |    robin | 9848022339 |   40000

(1 rows)
cqlsh:sample_db>
cqlsh:sample_db> UPDATE emp SET emp_city='Delhi',emp_sal=50000
             ...    WHERE emp_id=2;
cqlsh:sample_db>
cqlsh:sample_db> select * from emp where emp_id = 2;

 emp_id | emp_city | emp_name | emp_phone  | emp_sal
--------+----------+----------+------------+---------
      2 |    Delhi |    robin | 9848022339 |   50000

(1 rows)
cqlsh:sample_db>
cqlsh:sample_db> select * from emp;

 emp_id | emp_city  | emp_name | emp_phone  | emp_sal
--------+-----------+----------+------------+---------
      1 | Hyderabad |      ram | 9848022338 |   50000
      2 |     Delhi |    robin | 9848022339 |   50000
      3 |   Chennai |   rahman | 9848022330 |   45000

(3 rows)
cqlsh:sample_db> select * from emp where emp_id = 2;

 emp_id | emp_city | emp_name | emp_phone  | emp_sal
--------+----------+----------+------------+---------
      2 |    Delhi |    robin | 9848022339 |   50000

(1 rows)
cqlsh:sample_db> select emp_name,emp_sal from emp;

 emp_name | emp_sal
----------+---------
      ram |   50000
    robin |   50000
   rahman |   45000

(3 rows)
cqlsh:sample_db> INSERT INTO emp (emp_id, emp_name, emp_city,
             ...    emp_phone, emp_sal) VALUES(4,'mark', 'Chennai', 9848022331, 43000);
cqlsh:sample_db>
cqlsh:sample_db> INSERT INTO emp (emp_id, emp_name, emp_city,
             ...    emp_phone, emp_sal) VALUES(5,'justin', 'Vizag', 9848027330, 47000);
cqlsh:sample_db>
cqlsh:sample_db> select * from emp;

 emp_id | emp_city  | emp_name | emp_phone  | emp_sal
--------+-----------+----------+------------+---------
      5 |     Vizag |   justin | 9848027330 |   47000
      1 | Hyderabad |      ram | 9848022338 |   50000
      2 |     Delhi |    robin | 9848022339 |   50000
      4 |   Chennai |     mark | 9848022331 |   43000
      3 |   Chennai |   rahman | 9848022330 |   45000

(5 rows)
cqlsh:sample_db> DELETE emp_sal FROM emp WHERE emp_id=3;
cqlsh:sample_db>
cqlsh:sample_db> select * from emp;

 emp_id | emp_city  | emp_name | emp_phone  | emp_sal
--------+-----------+----------+------------+---------
      5 |     Vizag |   justin | 9848027330 |   47000
      1 | Hyderabad |      ram | 9848022338 |   50000
      2 |     Delhi |    robin | 9848022339 |   50000
      4 |   Chennai |     mark | 9848022331 |   43000
      3 |   Chennai |   rahman | 9848022330 |    null

(5 rows)
cqlsh:sample_db> CREATE TABLE dept(
             ...    dept_id int PRIMARY KEY,
             ...    dept_name text,
             ...    dept_project text,
             ...    dept_phone varint
             ...    );
cqlsh:sample_db>
cqlsh:sample_db> INSERT INTO emp (dept_id, dept_name, dept_project,
             ...    dept_phone) VALUES(1,'recruiting','a',923456781);
InvalidRequest: Error from server: code=2200 [Invalid query] message="Undefined column name dept_id"
cqlsh:sample_db>
cqlsh:sample_db> INSERT INTO dept (dept_id, dept_name, dept_project,
             ...    dept_phone) VALUES(1,'recruiting','a',923456781);
cqlsh:sample_db>
cqlsh:sample_db> truncate dept;
cqlsh:sample_db>
cqlsh:sample_db> select * from dept;

 dept_id | dept_name | dept_phone | dept_project
---------+-----------+------------+--------------

(0 rows)
cqlsh:sample_db> drop table dept;
cqlsh:sample_db>
cqlsh:sample_db> describe tables;

emp

cqlsh:sample_db> CREATE TABLE data(name text PRIMARY KEY, email list<text>);
cqlsh:sample_db>
cqlsh:sample_db> describe data;

CREATE TABLE sample_db.data (
    name text PRIMARY KEY,
    email list<text>
) WITH bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

cqlsh:sample_db> INSERT INTO data(name, email) VALUES ('ramu',
             ... ['abc@gmail.com','cba@yahoo.com']);
cqlsh:sample_db>
cqlsh:sample_db> INSERT INTO data(name, email) VALUES ('raj',
             ... ['abc1@gmail.com','cba1@yahoo.com']);
cqlsh:sample_db>
cqlsh:sample_db> INSERT INTO data(name, email) VALUES ('raghu',
             ... ['abc2@gmail.com','cba2@yahoo.com']);
cqlsh:sample_db>
cqlsh:sample_db> INSERT INTO data(name, email) VALUES ('rani',
             ... ['abc3@gmail.com','cba3@yahoo.com']);
cqlsh:sample_db>
cqlsh:sample_db> select * from data;

 name  | email
-------+--------------------------------------
  rani | ['abc3@gmail.com', 'cba3@yahoo.com']
   raj | ['abc1@gmail.com', 'cba1@yahoo.com']
 raghu | ['abc2@gmail.com', 'cba2@yahoo.com']
  ramu |   ['abc@gmail.com', 'cba@yahoo.com']

(4 rows)
cqlsh:sample_db>
cqlsh:sample_db> CREATE TABLE blogs (blogId int,
             ...                     time1 int,
             ...                     time2 int,
             ...                     author text,
             ...                     content text,
             ...                     PRIMARY KEY(blogId, time1, time2));
cqlsh:sample_db>
cqlsh:sample_db> select * from blogs;

 blogid | time1 | time2 | author | content
--------+-------+-------+--------+---------

(0 rows)
cqlsh:sample_db> SELECT * FROM blogs WHERE time1 = 1418306451235;
InvalidRequest: Error from server: code=2200 [Invalid query] message="Unable to make int from '1418306451235'"
cqlsh:sample_db>
cqlsh:sample_db> SELECT * FROM blogs WHERE author=’Jonathan Ellis’ and time2 = 1418306451235;
InvalidRequest: Error from server: code=2200 [Invalid query] message="Unable to make int from '1418306451235'"
cqlsh:sample_db> SELECT * FROM blogs WHERE time1 = 1418;
InvalidRequest: Error from server: code=2200 [Invalid query] message="Cannot execute this query as it might involve data filtering and thus may have unpredictable performance. If you want to execute this query despite the performance unpredictability, use ALLOW FILTERING"
cqlsh:sample_db>
cqlsh:sample_db> SELECT * FROM blogs WHERE author=’Jonathan Ellis’ and time2 = 1418;
InvalidRequest: Error from server: code=2200 [Invalid query] message="PRIMARY KEY column "time2" cannot be restricted as preceding column "time1" is not restricted"
cqlsh:sample_db>
cqlsh:sample_db>
cqlsh:sample_db> SELECT * FROM blogs WHERE time1 = 1418 ALLOW FILTERING;

 blogid | time1 | time2 | author | content
--------+-------+-------+--------+---------

(0 rows)
cqlsh:sample_db>